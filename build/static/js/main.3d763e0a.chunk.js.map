{"version":3,"sources":["serviceWorker.ts","swagger/common/default-plugin.tsx","demo/custom-plugins.tsx","demo/diff.tsx","swagger/components/api-class/api-class-constructor.tsx","swagger/components/api-class/api-class-fields.tsx","swagger/components/api-method/api-method-return-type.tsx","swagger/components/api-method/api-method-arguments.tsx","swagger/components/api-method/api-method-body.tsx","swagger/components/api-method/api-method-definition.tsx","swagger/components/api-class/api-class-methods.tsx","swagger/components/api-class/api-class-name.tsx","swagger/utils.ts","swagger/components/api-class/api-class-import.tsx","swagger/components/api-class/api-class-definition.tsx","demo/api-classes.tsx","swagger/components/definitions/model-definition.tsx","swagger/components/definitions/all-models-export.tsx","demo/api-model-definitions.tsx","swagger/model/swagger-definition-model.ts","swagger/model/swagger-method.ts","swagger/model/swagger-class.ts","swagger/model/swagger-doc-model.ts","swagger/common/swagger-context.ts","demo/swagger-root.tsx","demo/index.tsx","index.tsx","App.tsx"],"names":["Boolean","window","location","hostname","match","defaultPlugin","apiClassImport","Component","props","customPlugins","newProps","imports","DiffComponent","className","JSON","stringify","obj1","obj2","obj3","ApiClassConstructorComponent","ApiClassFieldsComponent","ApiMethodReturnTypeComponent","swaggerMethod","responseIsVoid","arraySymbol","responseIsArray","responseType","ApiMethodArgumentsComponent","result","parameters","map","parameter","index","separator","length","key","name","type","ApiMethodBodyComponent","parent","url","replace","postArguments","filter","isBodyParameter","join","getParams","httpMethod","ApiMethodDefinitionComponent","ApiClassMethodsComponent","methods","swaggerClass","method","ApiClassNameComponent","lowerlize","s","charAt","toLowerCase","slice","makeFileName","words","split","i","f","includes","sourceSymbol","Symbol","parentSymbol","getModelName","getJsType","indexOf","parts","Warning","isModelByTypeName","getClassName","toUpperCase","capitalize","getResponseIsArray","schema","getResponseType","res","items","additionalProperties","ApiClassImportAdapter","responseTypes","undefined","parameterTypes","forEach","push","unique","reduce","it","Object","keys","config","modelImportPath","plugin","ApiClassImportComponent","val","ApiClassDefinitionComponent","ApiClassesComponent","classes","def","source","ModelDefinitionComponent","fields","definition","properties","isArray","types","AllModelsExportComponent","exports","definitions","fileName","ApiModelDefinitionsComponent","renderCodegen","renderAllModelsExport","SwaggerDefinitionModel","this","accum2","key2","SwaggerDefinitionProperty","SwaggerMethodModel","tags","operationId","obj","SwaggerMethodParameter","responses","isPathParameter","isJsType","$ref","in","SwaggerClassModel","SwaggerDocModel","accum","paths","SwaggerContext","createContext","axios","require","SwaggerRootComponent","useState","setUrl","root","setRoot","loadSwagger","get","then","response","data","catch","error","console","log","useEffect","value","onChange","ev","target","onClick","Provider","SwaggerDemoComponent","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3d763e0a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {SwaggerPluginAction} from './swagger-plugins';\r\nimport * as React from 'react';\r\nimport {\r\n    ApiClassImportComponent,\r\n    IApiClassImportProps\r\n} from '../components/api-class/api-class-import';\r\n\r\nexport interface ISwaggerPlugin {\r\n    apiClassImport: SwaggerPluginAction<IApiClassImportProps>;\r\n}\r\n\r\nexport const defaultPlugin: ISwaggerPlugin = {\r\n    apiClassImport: (Component:React.FC<any>, props: IApiClassImportProps) => {\r\n        return (<Component {...props} />);\r\n    }\r\n};\r\n","import React from 'react';\r\nimport {IApiClassImportProps} from '../swagger/components';\r\nimport {defaultPlugin, ISwaggerPlugin} from '../swagger/common/default-plugin';\r\n\r\nexport const customPlugins: ISwaggerPlugin = {\r\n    ...defaultPlugin,\r\n    apiClassImport: (Component:React.FC<any>, props: IApiClassImportProps) => {\r\n        const newProps:IApiClassImportProps = {\r\n            ...props,\r\n            imports:[...props.imports]\r\n        }\r\n        return <>\r\n            <Component {...newProps}/>\r\n        </>;\r\n    }\r\n};\r\n\r\n","import React, {ReactNode} from 'react';\r\n\r\ninterface IProps {\r\n    obj1: object;\r\n    obj2: object;\r\n    obj3: ReactNode;\r\n}\r\n\r\nexport const DiffComponent: React.FC<IProps> = (props) => {\r\n    return (\r\n        <>\r\n            <div className={'d-flex w-100'}>\r\n                <div className={'col-4'}>\r\n                <pre>\r\n                 {JSON.stringify(props.obj1, null, 4)}\r\n                </pre>\r\n                </div>\r\n                <div className={'col-4'}>\r\n                <pre>\r\n                    {JSON.stringify(props.obj2, null, 4)}\r\n                </pre>\r\n                </div>\r\n\r\n                <div className={'col-4'}>\r\n                <pre>\r\n                    {props.obj3}\r\n                </pre>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\n","import React from \"react\";\r\nimport {SwaggerClassModel} from \"../../model/swagger-class\";\r\n\r\ninterface IProps {\r\n    swaggerClass: SwaggerClassModel;\r\n}\r\n\r\nexport const ApiClassConstructorComponent: React.FC<IProps> = (props) => {\r\n    return <>\r\n        {'\\t'}public constructor(service:IRequestService) {'{\\n'}\r\n        {'\\t\\t'}this._requestService = service; {'\\n'}\r\n        {'\\t}\\n'}\r\n    </>\r\n}\r\n","import React from \"react\";\r\nimport {SwaggerClassModel} from \"../../model/swagger-class\";\r\n\r\ninterface IProps {\r\n    swaggerClass: SwaggerClassModel;\r\n}\r\n\r\nexport const ApiClassFieldsComponent: React.FC<IProps> = (props) => {\r\n    return <>\r\n        {'\\t'}public _requestService:IRequestService; {'\\n'}\r\n    </>\r\n}\r\n","import React from \"react\";\r\nimport {SwaggerMethodModel} from \"../../model/swagger-method\";\r\n\r\ninterface IProps {\r\n    swaggerMethod: SwaggerMethodModel;\r\n}\r\n\r\nexport const ApiMethodReturnTypeComponent: React.FC<IProps> = (props) => {\r\n    if (props.swaggerMethod.responseIsVoid) {\r\n        return (<>{'AxiosPromise<void>'}</>);\r\n    }\r\n    const arraySymbol = props.swaggerMethod.responseIsArray ? '[]' : '';\r\n    return (<>{`AxiosPromise<${props.swaggerMethod.responseType}${arraySymbol}>`}</>);\r\n}\r\n","import React from \"react\";\r\nimport {SwaggerMethodModel, SwaggerMethodParameter} from \"../../model/swagger-method\";\r\n\r\ninterface IProps {\r\n    swaggerMethod: SwaggerMethodModel;\r\n}\r\n\r\nexport const ApiMethodArgumentsComponent: React.FC<IProps> = (props) => {\r\n    const result = props.swaggerMethod.parameters.map((parameter: SwaggerMethodParameter, index: number) => {\r\n        const isLastArgument = index !== props.swaggerMethod.parameters.length - 1;\r\n        const separator = isLastArgument ? ',' : ''\r\n        return (<span key={parameter.name}>{parameter.name}:{parameter.type}{separator}</span>)\r\n    });\r\n    return (<>{result}</>);\r\n}\r\n","import React from \"react\";\r\nimport {SwaggerMethodModel, SwaggerMethodParameter} from \"../../model/swagger-method\";\r\n\r\ninterface IProps {\r\n    swaggerMethod: SwaggerMethodModel;\r\n}\r\n\r\nexport const ApiMethodBodyComponent: React.FC<IProps> = (props) => {\r\n    const getHttpBodyArguments = () => {\r\n        const bodyParameters = props.swaggerMethod.parameters\r\n            .filter((parameter: SwaggerMethodParameter) => parameter.isBodyParameter)\r\n            .map((parameter: SwaggerMethodParameter) => {\r\n                return parameter.name;\r\n            });\r\n        return bodyParameters.join(',');\r\n    }\r\n\r\n    const getMethodUrl = () => {\r\n        const swaggerClass = props.swaggerMethod.parent;\r\n        return swaggerClass.url.replace(/{/g, '${');\r\n    }\r\n\r\n    const getParams = () => {\r\n        const postArguments = getHttpBodyArguments();\r\n        return postArguments && postArguments.length ? `[url,${postArguments}]` : `[url]`;\r\n    }\r\n\r\n    return (<>\r\n        {'\\t\\t'}const url = `{getMethodUrl()}`;{'\\n'}\r\n        {'\\t\\t'}const params = {getParams()};{'\\n'}\r\n        {'\\t\\t'}return this._requestService.{props.swaggerMethod.httpMethod}.apply(this._requestService,params);{'\\n'}\r\n    </>);\r\n}\r\n","import React from \"react\";\r\nimport {SwaggerMethodModel} from \"../../model/swagger-method\";\r\nimport {ApiMethodReturnTypeComponent} from \"./api-method-return-type\";\r\nimport {ApiMethodArgumentsComponent} from \"./api-method-arguments\";\r\nimport {ApiMethodBodyComponent} from \"./api-method-body\";\r\n\r\ninterface IProps {\r\n    swaggerMethod: SwaggerMethodModel;\r\n}\r\n\r\nexport const ApiMethodDefinitionComponent: React.FC<IProps> = (props) => {\r\n\r\n    return (<>\r\n        {'\\t'}public {props.swaggerMethod.name}(<ApiMethodArgumentsComponent swaggerMethod={props.swaggerMethod}/>):<ApiMethodReturnTypeComponent swaggerMethod={props.swaggerMethod} />{'{\\n'}\r\n       <ApiMethodBodyComponent swaggerMethod={props.swaggerMethod} />\r\n        {'\\t}\\n'}\r\n    </>);\r\n}\r\n","import React from \"react\";\r\nimport {ApiMethodDefinitionComponent} from \"../api-method/api-method-definition\";\r\nimport {SwaggerMethodModel} from \"../../model/swagger-method\";\r\nimport {SwaggerClassModel} from \"../../model/swagger-class\";\r\n\r\ninterface IProps {\r\n    swaggerClass: SwaggerClassModel;\r\n}\r\n\r\nexport const ApiClassMethodsComponent: React.FC<IProps> = (props) => {\r\n    const methods = props.swaggerClass.methods.map((method: SwaggerMethodModel) => {\r\n        return (<ApiMethodDefinitionComponent key={method.name} swaggerMethod={method}/>)\r\n    });\r\n\r\n    return (\r\n        <>\r\n            {methods}\r\n        </>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport {SwaggerClassModel} from \"../../model/swagger-class\";\r\n\r\ninterface IProps {\r\n    swaggerClass: SwaggerClassModel;\r\n}\r\n\r\nexport const ApiClassNameComponent: React.FC<IProps> = (props) => {\r\n    return (\r\n        <>\r\n            class {props.swaggerClass.name}\r\n        </>\r\n    );\r\n}\r\n","export const capitalize = (s: string) => {\r\n    if (typeof s !== 'string') return '';\r\n    return s.charAt(0).toUpperCase() + s.slice(1);\r\n};\r\n\r\nexport const lowerlize = (s: string) => {\r\n    if (typeof s !== 'string') return '';\r\n    return s.charAt(0).toLowerCase() + s.slice(1);\r\n};\r\n\r\nexport const html2text = (html: string) => {\r\n    return html.replace(/<(?:.|\\n)*?>/gm, '')\r\n        .replace(/&lt;/gm, '<')\r\n        .replace(/&gt;/gm, '>')\r\n        .replace(/&#x27;/gm, '\\'');\r\n};\r\n\r\nexport const makeFileName = (name: string) => {\r\n    let words = name.split(/(?=[A-Z])/).map((i: string) => i.toLowerCase());\r\n    words = words.filter((f: string) => !['api', 'i'].includes(f));\r\n    return `${words.join('-')}.ts`;\r\n};\r\n\r\nexport const sourceSymbol = Symbol('source');\r\nexport const parentSymbol = Symbol('source');\r\n\r\nexport const getModelName = (name: string) => {\r\n    return `I${name}Model`;\r\n};\r\nexport const getJsType = (type: string) => {\r\n    if (type === 'integer') {\r\n        return 'number';\r\n    }\r\n    if (type === 'array') {\r\n        return 'Array';\r\n    }\r\n    if (type && type.indexOf('#') >= 0) {\r\n        const parts = type.split('/');\r\n        return getModelName(`${parts[parts.length - 1]}`);\r\n    }\r\n    return type;\r\n};\r\n\r\nexport const Warning = '/* This code generated with swagger-typescript-generator. Don\\'t modify this file because it will be rewriten. */\\n';\r\nexport const isModelByTypeName = (name: string): boolean => {\r\n    return name ? name[0] == 'I' && name.indexOf('Model') !== 0 : false;\r\n};\r\n\r\nexport const getClassName = (key: string) => {\r\n    const parts = key.replace(/[\\{\\}]/g, '').replace(/[-_]/g, '/').split('/');\r\n    return parts.filter(f => f != 'api').map(s => capitalize(s)).join('') + 'Api';\r\n};\r\n\r\nexport const getResponseIsArray = (schema: any): boolean => {\r\n    return schema && schema.type === 'array';\r\n};\r\nexport const getResponseType = (schema: any): string => {\r\n    let res: string = '';\r\n    const responseType = schema.items ? schema.items['$ref'] : schema['$ref'];\r\n    if (responseType) {\r\n        res = getJsType(responseType);\r\n    }\r\n    if (!responseType) {\r\n        res = schema.type;\r\n    }\r\n    if (!responseType) {\r\n        const additionalProperties = schema.additionalProperties;\r\n        if (additionalProperties && additionalProperties['type']) {\r\n            res = getJsType(additionalProperties['type']);\r\n        }\r\n    }\r\n    return res;\r\n};\r\n","import React from 'react';\r\nimport {SwaggerClassModel} from '../../model/swagger-class';\r\nimport {SwaggerMethodModel, SwaggerMethodParameter} from '../../model';\r\nimport {isModelByTypeName} from '../../utils';\r\n\r\ninterface IProps {\r\n    swaggerClass: SwaggerClassModel;\r\n}\r\n\r\nexport const ApiClassImportAdapter: React.FC<IProps> = (props) => {\r\n    const responseTypes = props.swaggerClass.methods.map((method: SwaggerMethodModel) => {\r\n        return method.responseType && isModelByTypeName(method.responseType) ? method.responseType : undefined;\r\n    });\r\n\r\n    let parameterTypes: string [] = [];\r\n    props.swaggerClass.methods.forEach((method: SwaggerMethodModel) => {\r\n        method.parameters.forEach((parameter: SwaggerMethodParameter) => {\r\n            if (parameter.type && isModelByTypeName(parameter.type)) {\r\n                parameterTypes.push(parameter.type);\r\n            }\r\n        });\r\n    });\r\n\r\n    const unique = [...responseTypes, ...parameterTypes].reduce((it: any, key: any) => {\r\n        if (key) {\r\n            it[key] = key;\r\n        }\r\n        return it;\r\n    }, {});\r\n\r\n    const imports = [\r\n        'import {AxiosPromise} from \\'axios\\'',\r\n        'import {IRequestService, requestService} from \\'swagger-typescript-generator\\''];\r\n\r\n    const result = Object.keys(unique).filter((filter: string | any) => !!filter).join(',');\r\n    if (result.length) {\r\n        imports.push(`import {${result}} from '${props.swaggerClass.parent.config.modelImportPath}'`);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {props.swaggerClass.plugin.apiClassImport(\r\n                ApiClassImportComponent, {\r\n                    swaggerClass: props.swaggerClass,\r\n                    imports\r\n                })}\r\n        </>\r\n    );\r\n};\r\n\r\nexport interface IApiClassImportProps {\r\n    swaggerClass: SwaggerClassModel;\r\n    imports: string[];\r\n}\r\n\r\nexport const ApiClassImportComponent: React.FC<IApiClassImportProps> = (props) => {\r\n    const result = props.imports.map((val: string) => {\r\n        return (<div key={val}>{val};{'\\n'}</div>);\r\n    });\r\n\r\n    return (\r\n        <>\r\n            {result}\r\n            {'\\n'}\r\n        </>\r\n    );\r\n};\r\n","import React, {useContext} from 'react';\r\nimport {SwaggerClassModel} from '../../model/swagger-class';\r\nimport {ApiClassFieldsComponent} from './api-class-fields';\r\nimport {ApiClassConstructorComponent} from './api-class-constructor';\r\nimport {ApiClassMethodsComponent} from './api-class-methods';\r\nimport {ApiClassNameComponent} from './api-class-name';\r\nimport {SwaggerContext} from '../../common';\r\nimport {lowerlize, Warning} from '../../utils';\r\nimport {ApiClassImportAdapter} from \"./api-class-import\";\r\n\r\ninterface IProps {\r\n    swaggerClass: SwaggerClassModel;\r\n}\r\n\r\nexport const ApiClassDefinitionComponent: React.FC<IProps> = (props) => {\r\n    // const pluginContext = useContext(SwaggerContext);\r\n    // const plugin = pluginContext.plugin;\r\n    const {swaggerClass} = props;\r\n\r\n    return (\r\n        <>\r\n            {Warning}\r\n            <ApiClassImportAdapter swaggerClass={props.swaggerClass}/>\r\n\r\n            <ApiClassNameComponent swaggerClass={props.swaggerClass}/>\r\n            {'{\\n'}\r\n            <ApiClassFieldsComponent swaggerClass={props.swaggerClass}/>\r\n            <ApiClassConstructorComponent swaggerClass={props.swaggerClass}/>\r\n            <ApiClassMethodsComponent swaggerClass={props.swaggerClass}/>\r\n            {'}\\n'}\r\n            <span>export const {lowerlize(props.swaggerClass.name)} = new {props.swaggerClass.name}{'('}requestService{');\\n'}</span>\r\n        </>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport {DiffComponent} from \"./diff\";\r\nimport {SwaggerClassModel} from \"../swagger/model/swagger-class\";\r\nimport { ApiClassDefinitionComponent } from '../swagger/components/api-class';\r\nimport {ApiAllClassesExportComponent} from '../swagger/components/api-class/api-all-class-export';\r\nimport {ApiUrlsComponent} from '../swagger/components/urls';\r\n\r\ninterface IProps {\r\n    classes: SwaggerClassModel[];\r\n}\r\n\r\nexport const ApiClassesComponent: React.FC<IProps> = (props) => {\r\n    const renderCodegen = (swaggerClass: SwaggerClassModel) => {\r\n        return (<ApiClassDefinitionComponent swaggerClass={swaggerClass}></ApiClassDefinitionComponent>)\r\n    };\r\n    const result = props.classes.map((def: SwaggerClassModel,index:number ) => {\r\n        return <DiffComponent key={index} obj1={def.source} obj2={def} obj3={renderCodegen(def)}/>\r\n    })\r\n\r\n    // const renderAllClassesExport = <ApiAllClassesExportComponent classes={props.classes} />\r\n    // const renderAllUrlsExport = <ApiUrlsComponent classes={props.classes} />\r\n\r\n    return (\r\n        <>\r\n            {/* <h5 className={'pl-3'}>Api examble for index.ts:</h5>\r\n            <DiffComponent key={'index.ts1'} obj1={{}} obj2={{}} obj3={renderAllClassesExport}/>\r\n            <hr/>\r\n\r\n            <h5 className={'pl-3'}>Urls for all apis:</h5>\r\n            <DiffComponent key={'index.ts2'} obj1={{}} obj2={{}} obj3={renderAllUrlsExport}/>\r\n            <hr/> */}\r\n\r\n            <h5 className={'pl-3'}>Api:</h5>\r\n            {result}\r\n        </>\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\nimport {SwaggerDefinitionModel, SwaggerDefinitionProperty} from '../../model/swagger-definition-model';\r\nimport {isModelByTypeName, Warning} from '../../utils';\r\n\r\ninterface IProps {\r\n    definition: SwaggerDefinitionModel;\r\n}\r\n\r\nexport const ModelDefinitionComponent: React.FC<IProps> = (props) => {\r\n    const fields = props.definition.properties.map((parameter: SwaggerDefinitionProperty) => {\r\n        const type = parameter.isArray ? `${parameter.type}[]` : parameter.type;\r\n        return (<span key={parameter.name}>{'\\t'}{parameter.name}:{type}{'\\n'}</span>);\r\n    });\r\n\r\n    const types = props.definition.properties.map((parameter: SwaggerDefinitionProperty) => {\r\n        return isModelByTypeName(parameter.type) ? parameter.type : undefined;\r\n    }).filter((filter: string | any) => !!filter && filter !== props.definition.name).join(',');\r\n\r\n    const imports = [];\r\n    if (types.length) {\r\n        imports.push(`import {${types}} from '${props.definition.parent.config.modelImportPath}'`);\r\n    }\r\n\r\n    const result = imports.map((val: string,index) => {\r\n        return (<div key={index}>{val};{'\\n'}</div>);\r\n    });\r\n\r\n    return (\r\n        <>\r\n            {Warning}\r\n            {result}\r\n            export interface {props.definition.name}\r\n            {'{'} {'\\n'}{fields}\r\n            {'}'}\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n","import React from 'react';\r\nimport {SwaggerDefinitionModel} from '../../model/swagger-definition-model';\r\nimport {Warning} from '../../utils';\r\n\r\ninterface IProps {\r\n    definitions: SwaggerDefinitionModel[];\r\n}\r\n\r\nexport const AllModelsExportComponent: React.FC<IProps> = (props) => {\r\n    const exports = props.definitions.map((def: SwaggerDefinitionModel) => {\r\n        const name = def.fileName.split('.');\r\n        return (<span key={def.name}>export * from './{name[0]}'{'\\n'}</span>);\r\n    });\r\n    return (\r\n        <>\r\n            {Warning}\r\n            {exports}\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n","import React from 'react';\r\nimport {DiffComponent} from \"./diff\";\r\nimport {SwaggerDefinitionModel} from \"../swagger/model/swagger-definition-model\";\r\nimport {ModelDefinitionComponent} from '../swagger/components/definitions/model-definition';\r\nimport {AllModelsExportComponent} from '../swagger/components/definitions';\r\n\r\ninterface IProps {\r\n    definitions: SwaggerDefinitionModel[];\r\n}\r\n\r\nexport const ApiModelDefinitionsComponent: React.FC<IProps> = (props) => {\r\n    const renderCodegen = (def: SwaggerDefinitionModel) => {\r\n        return (<ModelDefinitionComponent definition={def}></ModelDefinitionComponent>)\r\n    };\r\n    const result = props.definitions.map((def: SwaggerDefinitionModel) => {\r\n        return <DiffComponent key={def.name} obj1={def.source} obj2={def} obj3={renderCodegen(def)}/>\r\n    })\r\n\r\n    const renderAllModelsExport = <AllModelsExportComponent definitions={props.definitions} />\r\n    return (\r\n        <>\r\n            <h5 className={'pl-3'}>Definitions examble for index.ts:</h5>\r\n            <DiffComponent key={'index.ts'} obj1={{}} obj2={{}} obj3={renderAllModelsExport}/>\r\n            <hr/>\r\n            <h5 className={'pl-3'}>Definitions:</h5>\r\n            {result}\r\n        </>\r\n    );\r\n}\r\n\r\n","import {\r\n    getJsType,\r\n    getModelName,\r\n    getResponseIsArray,\r\n    getResponseType,\r\n    makeFileName,\r\n    parentSymbol,\r\n    sourceSymbol\r\n} from '../utils';\r\nimport {SwaggerDocModel} from './swagger-doc-model';\r\n\r\nexport class SwaggerDefinitionModel {\r\n    public get source() {\r\n        return (this as any)[sourceSymbol];\r\n    }\r\n\r\n    public set source(val) {\r\n        (this as any)[sourceSymbol] = val;\r\n    }\r\n\r\n    public get parent(): SwaggerDocModel {\r\n        return (this as any)[parentSymbol];\r\n    }\r\n\r\n    public set parent(val) {\r\n        (this as any)[parentSymbol] = val;\r\n    }\r\n\r\n    public type: string = '';\r\n    public name: string = '';\r\n    public fileName:string = \"\";\r\n    public properties: SwaggerDefinitionProperty[] = [];\r\n\r\n    public constructor(parent:SwaggerDocModel,name: string, source: any) {\r\n        this.parent = parent;\r\n        this.source = source;\r\n\r\n        this.name = getModelName(name);\r\n        this.fileName = makeFileName(name);\r\n\r\n        this.type = getJsType(source.type);\r\n        if (source.items) {\r\n            this.type = getResponseType(source);\r\n        }\r\n\r\n        this.properties = Object.keys(source.properties).reduce((accum2: any, key2) => {\r\n            const obj2 = source.properties[key2];\r\n            accum2.push(new SwaggerDefinitionProperty(key2, obj2));\r\n            return accum2;\r\n        }, [])\r\n    }\r\n}\r\n\r\nexport class SwaggerDefinitionProperty {\r\n    public get source() {\r\n        return (this as any)[sourceSymbol];\r\n    }\r\n\r\n    public set source(val) {\r\n        (this as any)[sourceSymbol] = val;\r\n    }\r\n\r\n    public name: string = '';\r\n    public type: string = '';\r\n    public isArray: boolean = false;\r\n\r\n    public constructor(name: string, source: any) {\r\n        this.source = source;\r\n\r\n        this.name = name;\r\n        this.type = getJsType(source.type);\r\n        if (source.items) {\r\n            this.type = getResponseType(source);\r\n        }\r\n        this.isArray = getResponseIsArray(source);\r\n    }\r\n}\r\n","import {getJsType, getResponseIsArray, getResponseType, lowerlize, parentSymbol, sourceSymbol} from '../utils';\r\nimport {SwaggerClassModel} from './swagger-class';\r\nimport {IUrlInfo} from './url-info';\r\n\r\nexport class SwaggerMethodModel {\r\n    public httpMethod: string = '';\r\n    public name: string = '';\r\n    public tags: string = '';\r\n    public parameters: SwaggerMethodParameter[] = [];\r\n    public responseIsVoid?: boolean;\r\n    public responseIsArray?: boolean;\r\n    public responseType?: string;\r\n\r\n    public constructor(parent: SwaggerClassModel, httpMethod: string, source: any) {\r\n        this.parent = parent;\r\n        this.source = source;\r\n\r\n        this.name = lowerlize(this.source.operationId);\r\n        this.httpMethod = httpMethod;\r\n        [this.tags] = this.source.tags;\r\n\r\n        if (source.parameters) {\r\n            this.parameters = source.parameters.map((obj: any) => {\r\n                return new SwaggerMethodParameter(this, obj);\r\n            });\r\n        }\r\n\r\n        this.responseIsVoid = true;\r\n        if (source.responses && source.responses['200']) {\r\n            this.responseIsVoid = false;\r\n            const schema = source.responses['200'].schema;\r\n            if (schema) {\r\n                this.responseIsArray = getResponseIsArray(schema);\r\n                this.responseType = getResponseType(schema);\r\n            }\r\n        }\r\n    }\r\n\r\n    public get source() {\r\n        return (this as any)[sourceSymbol];\r\n    }\r\n\r\n    public set source(val) {\r\n        (this as any)[sourceSymbol] = val;\r\n    }\r\n\r\n    public get parent(): SwaggerClassModel {\r\n        return (this as any)[parentSymbol];\r\n    }\r\n\r\n    public set parent(val) {\r\n        (this as any)[parentSymbol] = val;\r\n    }\r\n\r\n    public getUrlInfo(): IUrlInfo {\r\n        return {\r\n            httpMethod: this.httpMethod,\r\n            name: this.name,\r\n            url: this.parent.url\r\n        };\r\n    }\r\n\r\n}\r\n\r\nexport class SwaggerMethodParameter {\r\n    public name: string = '';\r\n    public type: string = '';\r\n    public isBodyParameter?: boolean;\r\n    public isPathParameter?: boolean;\r\n    public isJsType?: boolean;\r\n\r\n    public constructor(parent: SwaggerMethodModel, source: any) {\r\n        this.parent = parent;\r\n        this.source = source;\r\n\r\n        this.name = source.name;\r\n        if (source['schema']) {\r\n            this.isJsType = false;\r\n            this.type = getJsType(source['schema'].$ref);\r\n            if (!this.type) {\r\n                this.type = getJsType(source['schema'].type);\r\n            }\r\n        } else {\r\n            this.type = getJsType(source.type);\r\n            this.isJsType = true;\r\n        }\r\n        this.isBodyParameter = source.in === 'body';\r\n        this.isPathParameter = source.in === 'path';\r\n    }\r\n\r\n    public get source() {\r\n        return (this as any)[sourceSymbol];\r\n    }\r\n\r\n    public set source(val) {\r\n        (this as any)[sourceSymbol] = val;\r\n    }\r\n\r\n    public get parent(): SwaggerMethodModel {\r\n        return (this as any)[parentSymbol];\r\n    }\r\n\r\n    public set parent(val) {\r\n        (this as any)[parentSymbol] = val;\r\n    }\r\n}\r\n","import {SwaggerMethodModel} from './swagger-method';\r\nimport {SwaggerDocModel} from './swagger-doc-model';\r\nimport {getClassName, makeFileName, parentSymbol, sourceSymbol} from '../utils';\r\n\r\nexport class SwaggerClassModel {\r\n    public name: string = '';\r\n    public url: string;\r\n    public fileName: string;\r\n    public methods: SwaggerMethodModel[] = [];\r\n\r\n    public constructor(parent: SwaggerDocModel, key: string, source: any) {\r\n        this.parent = parent;\r\n        this.source = source;\r\n\r\n        // eslint-disable-next-line\r\n        this.name = getClassName(key);\r\n        this.url = key;\r\n        this.fileName = makeFileName(this.name);\r\n\r\n        this.methods = Object.keys(source).reduce((accum2: any, key2) => {\r\n            const obj2 = source[key2];\r\n            accum2.push(new SwaggerMethodModel(this, key2, obj2));\r\n            return accum2;\r\n        }, []);\r\n    }\r\n\r\n    public get plugin() {\r\n        return this.parent.config.plugin;\r\n    }\r\n\r\n    public get source() {\r\n        return (this as any)[sourceSymbol];\r\n    }\r\n\r\n    public set source(val) {\r\n        (this as any)[sourceSymbol] = val;\r\n    }\r\n\r\n    public get parent(): SwaggerDocModel {\r\n        return (this as any)[parentSymbol];\r\n    }\r\n\r\n    public set parent(val) {\r\n        (this as any)[parentSymbol] = val;\r\n    }\r\n}\r\n","import {SwaggerDefinitionModel} from './swagger-definition-model';\r\nimport {SwaggerClassModel} from './swagger-class';\r\nimport {ISwaggerPlugin} from \"../common\";\r\n\r\nconst sourceSymbol = Symbol('source');\r\n\r\nexport interface ISwaggerDocModelConfig {\r\n    source: any;\r\n    modelImportPath: string;\r\n    plugin:ISwaggerPlugin;\r\n}\r\n\r\nexport class SwaggerDocModel {\r\n    public definitions: SwaggerDefinitionModel[] = [];\r\n    public classes: SwaggerClassModel[] = [];\r\n\r\n    public constructor(config: ISwaggerDocModelConfig) {\r\n        this.config = config;\r\n\r\n        const {source} = config;\r\n        this.definitions = Object.keys(source.definitions).reduce((accum: SwaggerDefinitionModel[], key) => {\r\n            const obj = source.definitions[key];\r\n            accum.push(new SwaggerDefinitionModel(this,key, obj));\r\n            return accum;\r\n        }, []);\r\n\r\n\r\n        this.classes = Object.keys(source.paths).reduce((accum: SwaggerClassModel[], key) => {\r\n            const obj = source.paths[key];\r\n            accum.push(new SwaggerClassModel(this, key, obj));\r\n            return accum;\r\n        }, []);\r\n    }\r\n\r\n    public get config(): ISwaggerDocModelConfig {\r\n        return (this as any)[sourceSymbol];\r\n    }\r\n\r\n    public set config(val: ISwaggerDocModelConfig) {\r\n        (this as any)[sourceSymbol] = val;\r\n    }\r\n}\r\n","import {createContext} from \"react\";\r\nimport {defaultPlugin, ISwaggerPlugin} from './default-plugin';\r\n\r\nexport interface ISwaggerContextProps {\r\n    plugin: ISwaggerPlugin;\r\n}\r\n\r\nexport const SwaggerContext = createContext<ISwaggerContextProps>({plugin: defaultPlugin});\r\n","import React, {useEffect, useState} from 'react';\r\nimport {ApiModelDefinitionsComponent} from './api-model-definitions';\r\nimport {ApiClassesComponent} from './api-classes';\r\nimport {ISwaggerDocModelConfig, SwaggerDocModel} from '../swagger/model/swagger-doc-model';\r\nimport {ISwaggerContextProps, SwaggerContext} from '../swagger/common/swagger-context';\r\nimport {ISwaggerPlugin} from '../swagger/common/default-plugin';\r\n\r\nconst axios = require('axios');\r\n\r\ninterface IProps {\r\n    plugin: ISwaggerPlugin;\r\n}\r\n\r\nexport const SwaggerRootComponent: React.FC<IProps> = (props) => {\r\n    const swaggerUrl = 'https://petstore.swagger.io/v2/swagger.json';\r\n    const [url, setUrl] = useState(swaggerUrl);\r\n    const [root, setRoot] = useState<SwaggerDocModel>();\r\n\r\n    const loadSwagger = () => {\r\n        axios.get(url)\r\n            .then((response: any) => {\r\n                const config: ISwaggerDocModelConfig = {\r\n                    source: response.data,\r\n                    modelImportPath: '../api-model',\r\n                    plugin: props.plugin\r\n                };\r\n                setRoot(new SwaggerDocModel(config));\r\n            })\r\n            .catch((error: string) => {\r\n                console.log('load swagger error ' + error);\r\n            });\r\n    };\r\n    const onExploreClick = () => {\r\n        loadSwagger();\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!root) {\r\n            loadSwagger();\r\n        }\r\n    });\r\n\r\n    const renderSwagger = () => {\r\n        return root && root.definitions ? (\r\n            <>\r\n                <div className={'d-flex w-100'}>\r\n                    <div className={'col-4'}>\r\n                        <h5>Swagger</h5>\r\n                    </div>\r\n                    <div className={'col-4'}>\r\n                        <h5>Transformed</h5>\r\n                    </div>\r\n\r\n                    <div className={'col-4'}>\r\n                        <h5>Typescript</h5>\r\n                    </div>\r\n                </div>\r\n\r\n                <hr/>\r\n                <ApiClassesComponent classes={root.classes}/>\r\n\r\n                <hr/>\r\n                <ApiModelDefinitionsComponent definitions={root.definitions}/>\r\n            </>\r\n        ) : null;\r\n    };\r\n\r\n    const getContextValue = (): ISwaggerContextProps => {\r\n        return {\r\n            plugin: props.plugin\r\n        };\r\n    };\r\n\r\n    return (\r\n        <div className={'p-2'}>\r\n            <div className={'d-flex px-3 pt-1'}>\r\n                <h5>Url&nbsp;to&nbsp;swagger.json:&nbsp;</h5>\r\n                <input type={'text'} className={'w-100'} value={url} onChange={(ev) => setUrl(ev.target.value)}/>\r\n                <button onClick={onExploreClick}>explore</button>\r\n            </div>\r\n            <hr/>\r\n\r\n            <SwaggerContext.Provider value={getContextValue()}>\r\n                {renderSwagger()}\r\n            </SwaggerContext.Provider>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport {customPlugins} from \"./custom-plugins\";\r\nimport { SwaggerRootComponent } from '.';\r\n\r\nexport * from './custom-plugins';\r\nexport * from '../demo/api-classes';\r\nexport * from '../demo/api-model-definitions';\r\nexport * from '../demo/diff';\r\nexport * from './swagger-root';\r\n\r\nexport const SwaggerDemoComponent: React.FC = () => {\r\n    return (\r\n        <div>\r\n            <SwaggerRootComponent plugin={customPlugins}/>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport {App} from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {SwaggerDemoComponent} from './demo';\r\n\r\nexport const App: React.FC = () => {\r\n    return (\r\n        <div>\r\n            <SwaggerDemoComponent />\r\n        </div>\r\n    );\r\n}\r\n"],"sourceRoot":""}